#!/usr/bin/env ruby

require 'csv'
require 'fileutils'
require 'optparse'

# Loads application environment
require_relative '../config'

require 'lib/parser/date_time_parser'
require 'lib/parser/phone_number_parser'
require 'lib/parser/text_parser'
require 'lib/reporter'

CSV_INPUT_PATH = 'input.csv'
OUTPUT_FILE_NAME = 'output.csv'
REPORT_FILE_NAME = 'report.txt'

options = {
  output_directory: 'out'
}
OptionParser.new do |opts|
  opts.on('-o DIR', '--out-dir DIR', 'change output directory (defaults to ./out)') do |o|
    options[:output_directory] = o
  end
end.parse!

Header = Struct.new(:column, :parser, :required)

HEADER_ROW_METADATA = [
  Header.new('first_name', Parser::TextParser, true),
  Header.new('last_name', Parser::TextParser, true),
  Header.new('dob', Parser::DateTimeParser, true),
  Header.new('member_id', Parser::TextParser, true),
  Header.new('effective_date', Parser::DateTimeParser, true),
  Header.new('expiry_date', Parser::DateTimeParser, false),
  Header.new('phone_number', Parser::PhoneNumberParser, false),
]

FileUtils.mkdir_p(options[:output_directory])

reporter = Reporter.new

CSV.open(File.join(options[:output_directory], OUTPUT_FILE_NAME), "wb") do |out|
  out << HEADER_ROW_METADATA.map(&:column)

  row_number = 0
  CSV.foreach(CSV_INPUT_PATH) do |row|
    row_number += 1

    if row_number == 1
      next
    end

    transformed_row = []
    row.each_with_index do |value, index|
      header = HEADER_ROW_METADATA[index]
      result = header.parser.parse(value)

      result.reports.each do |report|
        reporter.add_for_column_number(row_number, HEADER_ROW_METADATA[index].column, report)
      end

      if header.required && result.value.nil?
        break
      end

      transformed_row << result.value
    end

    # If we early-exited because of a missing required value, do not write
    # this row to the output CSV (though reports are still added to
    # out/report.txt)
    if transformed_row.length != HEADER_ROW_METADATA.length
      next
    end

    out << transformed_row
  end
end

File.open(File.join(options[:output_directory], REPORT_FILE_NAME), 'wb') do |file|
  reporter.each do |report|
    file << report + "\n"
  end
end
