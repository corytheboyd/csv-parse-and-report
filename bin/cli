#!/usr/bin/env ruby
# frozen_string_literal: true

require 'csv'
require 'fileutils'
require 'optparse'

# Loads application environment
require_relative '../config'

require 'lib/parser/date_time_parser'
require 'lib/parser/phone_number_parser'
require 'lib/parser/text_parser'
require 'lib/reporter'

CSV_INPUT_PATH = 'input.csv'
OUTPUT_FILE_NAME = 'output.csv'
REPORT_FILE_NAME = 'report.txt'

options = {
  output_directory: 'out'
}
OptionParser.new do |opts|
  opts.on('-o DIR', '--out-dir DIR', 'change output directory (defaults to ./out)') do |o|
    options[:output_directory] = o
  end
end.parse!

Header = Struct.new(:column, :parser)

HEADER_ROW_METADATA = [
  Header.new('first_name', Parser::TextParser),
  Header.new('last_name', Parser::TextParser),
  Header.new('dob', Parser::DateTimeParser),
  Header.new('member_id', Parser::TextParser),
  Header.new('effective_date', Parser::DateTimeParser),
  Header.new('expiry_date', Parser::DateTimeParser),
  Header.new('phone_number', Parser::PhoneNumberParser),
]

FileUtils.mkdir_p(options[:output_directory])

reporter = Reporter.new

CSV.open(File.join(options[:output_directory], OUTPUT_FILE_NAME), "wb") do |out|
  out << HEADER_ROW_METADATA.map(&:column)

  header_consumed = false
  CSV.foreach(CSV_INPUT_PATH) do |row|
    unless header_consumed
      header_consumed = true
      next
    end

    out << row.map.with_index do |value, index|
      result = HEADER_ROW_METADATA[index].parser.parse(value)

      result.reports.each do |report|
        reporter.add_for_column_number(index + 1, HEADER_ROW_METADATA[index].column, report)
      end

      result.value
    end
  end
end

File.open(File.join(options[:output_directory], REPORT_FILE_NAME), 'wb') do |file|
  reporter.each do |report|
    file << report
  end
end
